****************************
REACT to start the DEV Server Locally -> npm run dev
This will open -> http://localhost:3000/

END of local REACT project run -> npm run build and this creates 
a "dist" that you can deploy your code with
-----------------------------
npm create vite@latest ADD name of your project -- --template react
change the port of the localhost SERVER:3000

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
  },
});
-----------------------------

WEB VITALS ERROR?

npm install web-vitals

-----------------------------
cd INTO YOUR REACT FOLDER
  npm install
  npm run dev

ROUTING install = npm i react-router-dom
*****************************

CMD SHIFT D  = selects all of the text you want to change at one Time.
rafce = creating a React ARROW Function for components

*****************************
TAILWIND CSS INSTALL ->
https://tailwindcss.com/docs/guides/create-react-app
*****************************

React Basics Concepts
Using Router and Links to "link" to other pages on a SPA
LINKS -- import the links and use <NavLink instead of <a href="" 

JSX (JavaScript Syntax Extension) An HTML-like syntax within JavaScript(components)

import { Link } from "react-router-dom";
const Navbar = () => {
    return (
      <nav>
        <ul className="navbar_list">
          <li><NavLink to="/">Home</NavLink></li>
          <li><NavLink to="/products">Products</NavLink></li>
        </ul>
      </nav>
    );
  };

  ROUTES links with ID
  <Routes>
  <Route path="/" element={<Home />} />
  <Route path="/products" element={<Products />} />
  <Route path="/products/:id" element={<SingleProduct />} />
  <Route path="/articles" element={<Articles />} />
  <Route path="/admin" element={<Admin />} />
  <Route path="*" element={<NotFound />} />
</Routes>
------------------------------
Creating component
Component is Reusable piece of code that used to define certain part of user interface.

Think of a React component as a small, self-contained piece of code that describes how a 
part of a website or application should look and behave.

Here is the basic structure of react component:

import React from "react";
 
const Card = () => {
    return <div>Card Component</div>;
};
 
export default Card;
--------------------------------------
JSX and Babel
JSX stands for “JavaScript XML” and it is code in which we can write HTML and JavaScript code together. 
This code looks very similar to the HTML markup.

import React from "react";
 
const Card = () => {
    const name = "Code Bless You!";
    return <h1>Name: {name}</h1>;  // This is jsx code
};
 
export default Card;
Now this JSX code, browser can not understand, so we have to covert this code into 
vanilla JavaScript code and for that React use babel library.

You can paste this code in to babel.io website and you can see it’s vanilla JavaScript code.

So we can easily write JSX code in our file and babel will convert that code in to 
JavaScript code that browsers can understand.

Article - https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
------------------------
Adding multiple elements
So for adding multiple elements in react component, we have to wrap them with one parent element. 
Because we know in babel our code convert in React JSX function and that function only add one 
element in its first argument.

There are 2 solutions for that:

We can wrap our elements with any one parent element.

import React from "react";
 
const Card = () => {
    return (
        <div>
            <h1>This is Card Component</h1>
            <button>Add new task</button>
        </div>
    );
};
 
export default Card;
------------------------------
We can use React.Fragment component for wrapping them.

import React from "react";
 
const Card = () => {
    return (
        <React.Fragment>
            <h1>This is Card Component</h1>
            <button>Add new task</button>
        </React.Fragment>
    );
};
 
export default Card;
or we can use this also

import React from "react";
 
const Card = () => {
    return (
        <>
            <h1>This is Card Component</h1>
            <button>Add new task</button>
        </>
    );
};
 
export default Card;
-----------------------------
Adding JavaScript expression into JSX
Now to add JavaScript expression in to JSX, we just need to add curly brackets 
and inside this we can add JavaScript expression.

import React from "react";
 
const Card = () => {
    const tasks = 5;
    return (
        <>
            <h1>Total Tasks: {tasks}</h1>
            <button>Add new task</button>
        </>
    );
};
 
export default Card;

---------------
  
Adding attributes and events in JSX
In JSX, we can add attribute/events same as we add attributes/events in HTML. But some attributes are different.

For example, for adding class to our element, we have to use className attribute and also for 
defining inline style, we have to pass style object in style attribute.


State
When we change our normal variable value, that value change will not happen on our web page. 
So for reflecting that change on our DOM, we have to make our variable as state variable.

In simple words, if we define our variable as state variable, then react will watch that variable 
and if its value change, then react will reflect that change immediately.

So for defining state variable we have to use useState hook.

What are hooks?
hooks in React are functions that allow us to add state and other React features to functional components.

Before hooks were introduced, state and other features could only be used in class components. 
However, with hooks, you can use these features directly in functional components, making them more powerful and versatile.

useState Hook
useState is used to create state variables in functional components. So to use the useState 
hook we need to first import that and use it inside the function component.

We pass any type of data - Like Boolean, number, text, object, array anything. This useState 
hook returns array with two items. The first one is its current value and the second one is 
the function for updating that value.

import React, { useState } from "react";
 
const Card = () => {
    const [count, setCount] = useState(5);
    const handleClick = () => {
        setCount(count + 1);
    };
    return (
        <>
            <h1>Total Counts: {count}</h1>
            <button onClick={handleClick}>Add new task</button>
        </>
    );
};
 
export default Card;
-------------------------

// Import the `useState` hook from the `react` library.
import React, { useState } from "react";

// Define the `Text` functional component.
const Text = () => {
  // Use the `useState` hook to create a state variable `isVisible` initialized to `false`.
  const [isVisible, setIsVisible] = useState(false);

  // Define a function `toggleVisibility` that toggles the `isVisible` state when the button is clicked.
  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  // Return JSX elements to be rendered on the web page.
  return (
    <div className="container">
      {/* Create a button with an `onClick` event handler that calls `toggleVisibility`. */}
      <button onClick={toggleVisibility} className="button">
        Toggle Visibility
      </button>

      {/* Conditionally render a paragraph with a class `text` based on the `isVisible` state. */}
      {isVisible && <p className="text">This text is now visible!</p>}
    </div>
  );
};

// Export the `Text` component for use in other parts of the application.
export default Text;

-------------------------
We can also use useState hook, for handling inputs. Just we have to pass our set function in onChange event.

import React, { useState } from "react";
 
const Card = () => {
    const [input, setInput] = useState("");
    const handleChange = (e) => {
        setInput(e.target.value);
    };
    return (
        <>
            <input type='text' onChange={handleChange} />
            <h1>Input: {input}</h1>
        </>
    );
};
 
export default Card;
------------------------

Mapping list items
Use map method to display the list of items in react. 

Always remember to add key attribute for returning element and pass unique value in it. 
That will help react to quickly identified which element gets changed.

import React from "react";
 
const Card = () => {
    const products = ["Product1", "Product2", "Product3"];
    return (
        <>
            <ul>
                {products.map((product) => (
                    <li key={product}>{product}</li>
                ))}
            </ul>
        </>
    );
};
 
export default Card;
*****************************
  
REACT JS useState() EXAMPLE ->

Here’s a simple example of using useState in a React component to handle input changes:

Example: Controlled Input Field

import React, { useState } from "react";

function InputHandlerExample() {
  const [inputValue, setInputValue] = useState(""); // Step 1: Initialize state

  // Step 2: Define input handler
  const handleInputChange = (event) => {
    setInputValue(event.target.value); // Update the state with input value
  };

  return (
    <div>
      <h1>React useState Input Handler Example</h1>
      {/* Step 3: Bind input value and onChange */}
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        placeholder="Type something..."
      />
      <p>You typed: {inputValue}</p>
    </div>
  );
}

export default InputHandlerExample;

***Key Points:
useState Hook: It is used to manage the inputValue state.

useState("") initializes the state with an empty string.
setInputValue updates the state whenever the input changes.
handleInputChange Function: This function takes the event object, extracts the value of the input field using event.target.value, and updates the state.

Controlled Component: The value attribute of the input is tied to the state (inputValue). This makes it a controlled input, ensuring the React state is the single source of truth.

This approach is scalable and can be extended for forms with multiple inputs.
------------------------------------

handleClick ClickHandler Event Handlers ->

import React, { useState } from "react";

function ClickHandlerExample() {
  const [count, setCount] = useState(0); // Step 1: Initialize state

  // Step 2: Define click handler
  const handleClick = () => {
    setCount(count + 1); // Update the state to increment the count
  };

  return (
    <div>
      <h1>React handleClick Example</h1>
      <p>Button clicked {count} times</p>
      {/* Step 3: Attach click handler to the button */}
      <button onClick={handleClick}>Click Me</button>
    </div>
  );
}

export default ClickHandlerExample;

***Key Points:
useState Hook:

useState(0) initializes the state variable count to 0.
setCount updates the state.
handleClick Function:

When the button is clicked, the handleClick function is called.
It increments the count by 1 using setCount.
Button with onClick:

The onClick event handler is attached to the button.
This triggers the handleClick function when the button is clicked.  

<! ---------------------START---------------------- -->
import { useEffect, useState } from "react";

export default function App() {
  const [advice, setAdvice] = useState("");
  const [count, setCount] = useState(0);

  async function getAdvice() {
    const res = await fetch("https://api.adviceslip.com/advice");
    const data = await res.json();
    setAdvice(data.slip.advice);
    setCount((c) => c + 1);
  }

  useEffect(function () {
    getAdvice();
  }, []);

  return (
    <div>
      <h1>{advice}</h1>
      <button onClick={getAdvice}>Get Advice</button>
      <Message count={count} />
    </div>
  );
}

function Message(props) {
  return (
    <p>
      You have read <strong>{props.count}</strong> pieces of advice
    </p>
  );
}

<!-- ------------------ END ----------------------- -->

<!-------------- PURE REACT ---------------------- -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello React!</title>
</head>
<body>
    <div id="root"></div>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <script>
        function App() {
            //const time = new Date().toLocaleTimeString();
            const [time, setTime] = React.useState(new Date().toLocaleTimeString());
            React.useEffect(function() {
            setInterval(function() {
            setTime(new Date().toLocaleTimeString())
            }, 1000);
            }, [])
            return React.createElement("header", null, `Hello React! it's ${time}`);
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
    </script>
</body>
</html>
<!-- ------------------ END ----------------------- -->
