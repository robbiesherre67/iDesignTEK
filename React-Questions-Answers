1. What is the difference between a functional component and a class component in React?
Answer:
Functional components are plain JavaScript functions that return JSX. 
Class components are ES6 classes that extend React.Component and require a render() method.

Code:
// Functional
const Hello = () => <h1>Hello</h1>;

// Class
class Hello extends React.Component {
  render() {
    return <h1>Hello</h1>;
  }
}
-------------------------------
2. How does the key prop help React in lists?
Answer:
The key prop gives React a way to identify which items have changed, are added, or removed. 
It optimizes rendering performance by avoiding unnecessary re-renders.

Code:
{items.map(item => (
  <li key={item.id}>{item.name}</li>
))}
-------------------------------
3. What is "lifting state up" in React?
Answer:
Lifting state up means moving shared state to the closest common ancestor of components that need it. 
This enables those components to stay in sync.

Code:
// Parent manages state and passes it down
function Parent() {
  const [count, setCount] = useState(0);
  return <Child count={count} setCount={setCount} />;
}
-------------------------------
4. What happens when you call setState or useState's updater?
Answer:
React schedules a re-render of the component with the new state. 
It does not update state immediately; updates are batched and asynchronous.

Code:
setCount(count + 1);
console.log(count); // Still old value immediately after
-------------------------------
5. What is JSX and why do we use it?
Answer:
JSX is a syntax extension that allows writing HTML-like code in JavaScript. 
React uses it to describe UI components declaratively.

Code:
const element = <h1>Hello, JSX!</h1>;

-------------------------------

-------------------------------
